#!/usr/bin/env sh
#
# To use, add to script
#
# DIR=$( dirname "$(readlink -f "$0")" )
# . $DIR/shared-functions

# On hosts that use RH Software collections, ensure that
# the profile is up and ready to go to source ruby.
if [ -f /opt/rh/ruby193/enable ]; then
  . /opt/rh/ruby193/enable
fi

PROJECT_ROOT=/opt/puppet
LOG_FILE=/var/log/puppet.log
NODE=$(hostname -s);
PATH=${PROJECT_ROOT}/bin:/usr/local/bin:$PATH

# From http://www.novell.com/coolsolutions/feature/11251.html
OS=`uname -s`
REV=`uname -r`
MACH=`uname -m`

if [ "$OS" = "OpenBSD" ]; then
    ARCH=`arch -s`
    BUNDLE_PATH='bundle20'
elif [ "$OS" = "Linux" ]; then
	KERNEL=`uname -r`
  BUNDLE_PATH='bundle'
	if [ -f /etc/redhat-release ]; then
		DIST='RedHat'
		REV=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
    MAJORVER=`echo $REV | cut -d '.' -f1`
	elif [ -f /etc/SUSE-release ]; then
		DIST=`cat /etc/SUSE-release | tr "\n" ' '| sed s/VERSION.*//`
		REV=`cat /etc/SUSE-release | tr "\n" ' ' | sed s/.*=\ //`
	elif [ -f /etc/debian_version ] ; then
		DIST="Debian"
		REV="`cat /etc/debian_version`"
    CODENAME=`/usr/bin/lsb_release -c -s`
	fi
fi

git_ref_type() {
    [ -n "$1" ] || die "Missing ref name"

    if git show-ref -q --verify "refs/heads/$1" 2>/dev/null; then
        echo "branch"
    elif git show-ref -q --verify "refs/tags/$1" 2>/dev/null; then
        echo "tag"
    elif git show-ref -q --verify "refs/remote/$1" 2>/dev/null; then
        echo "remote"
    elif git rev-parse --verify "$1^{commit}" >/dev/null 2>&1; then
        echo "hash"
    else
        echo "unknown"
    fi
    return 0
}

ensure_directory_exists() {
    DIR=$1

    if [ ! -d $DIR ]; then
        echo "Creating directory $DIR..."
        mkdir -p $DIR
    fi
}

# Bail if not root
bail_if_not_root() {
    if [ $(id -u) -ne 0 ]; then
        echo "********************************************************"
        echo "          Please run with root privileges"
        echo "********************************************************"
        exit 1
    fi
}

bash_tuple() {
  TEST=$1; shift;
  TRUE=$1; shift;
  FALSE=$1; shift

  if [ "$TEST" = "true" ]; then
    echo $TRUE
  else
    echo $FALSE
  fi
}

info() {
  MESSAGE=$1
  if [ -z "$ST2_SILENCE" ]; then
    echo "[info] $MESSAGE"
  fi
}

log() {
  MESSAGE=$1
  echo "[log] $MESSAGE"
}

debug() {
  MESSAGE=$1
  if [ -n "$DEBUG" ]; then
    echo "[debug] $MESSAGE"
  fi
}
