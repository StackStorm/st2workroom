#!/usr/bin/env sh
#
# To use, add to script
#
# DIR=$( dirname "$(readlink -f "$0")" )
# . $DIR/shared-functions

# On hosts that use RH Software collections, ensure that
# the profile is up and ready to go to source ruby.
if [ -f /opt/rh/ruby193/enable ]; then
  . /opt/rh/ruby193/enable
fi

PROJECT_ROOT=/opt/puppet
LOG_FILE=/var/log/puppet.log
NODE=$(hostname -s);
PATH=${PROJECT_ROOT}/bin:/usr/local/bin:$PATH

# From http://www.novell.com/coolsolutions/feature/11251.html
OS=`uname -s`
REV=`uname -r`
MACH=`uname -m`

if [ "$OS" = "OpenBSD" ]; then
    ARCH=`arch -s`
    BUNDLE_PATH='bundle20'
elif [ "$OS" = "Linux" ]; then
	KERNEL=`uname -r`
  BUNDLE_PATH='bundle'
	if [ -f /etc/redhat-release ]; then
		DIST='RedHat'
		REV=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
    MAJORVER=`echo $REV | cut -d '.' -f1`
	elif [ -f /etc/SUSE-release ]; then
		DIST=`cat /etc/SUSE-release | tr "\n" ' '| sed s/VERSION.*//`
		REV=`cat /etc/SUSE-release | tr "\n" ' ' | sed s/.*=\ //`
	elif [ -f /etc/debian_version ] ; then
		DIST="Debian"
		REV="`cat /etc/debian_version`"
    CODENAME=`/usr/bin/lsb_release -c -s`
	fi
fi


# Runs a command with any number of arguments and whatnot,
# and outputs STDOUT/STDERR to the global log-file
#
# Usage:
#  execute-command-with-logging librarian install
execute-command-with-logging() {
    eval "${@} >> ${LOG_FILE} 2>&1"
}

# Runs a command with any number of arguments and whatnot,
# outputs STDOUT/STDERR to the global log file and STDOUT
#
# Usage:
#  execute-command-with-debug librarian install
execute-command-with-debug() {
    local _command=
    _command="${@}"

    echo "Running ${_command}..."
    eval "${_command} | tee -a ${LOG_FILE} 2>&1"
}

# Runs a command and routes it to the appropriate logging mechanism
#
# Usage:
#  execute-command librarian install
execute-command() {
    if [ -n "$DEBUG" ];
    then execute-command-with-debug $@
    else execute-command-with-logging $@
    fi
}
