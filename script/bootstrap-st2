#!/usr/bin/env bash
# This stand-alone script should be able to be used to kickstart a new node
set -e

##############################
# Main Entry Point
init-bootstrap-st2() {
    if ! is-root; then
        echo "Please re-run with root privileges"
        show-help
        exit 1
    fi

    check-for-os-compatability
    install-git

    clone-aio-installer-from-github
    set-puppet-role-to-st2
    ensure-hubot-is-not-installed-if-requested-by-user
    setup-answer-file-if-supplied-by-user

    run-bootstrap-os
    run-puppet-apply
    check-st2-health
}

### CLI Parsing
show-help() {
    echo ""
    echo "StackStorm All-in-one Installer"
    echo "Usage: $0 [OPTION]..."
    echo
    echo "  -e,  --environment,      Set the st2workroom environment"
    echo "  -b,  --branch,           Same as --environment (DEPRECATED)"
    echo "  -s,  --st2-puppet-branch Set the upstream puppet-st2 branch"
    echo "  -h,  --help              This help screen"
    echo "  -t,  --trace             Execute with shell tracing enabled"
    echo ""
    echo "Environment Variables:"
    echo "  ENV=                     Set the st2workroom environment"
    echo "  ST2_PUPPET_BRANCH=       Set the upstream puppet-st2 branch"
}

clone-aio-installer-from-github() {
    local _repo="https://github.com/StackStorm/st2workroom"
    local _dst_dir="$(project-root)"

    safe-git-clone $_repo $_dst_dir
}

## Tool Helpers
install-git-on-debian() {
    apt-get install -y git
}

install-git-on-redhat() {
    yum install -y git-core
}

install-git() {
    if dist-is-redhat; then
        install-git-on-redhat
    elif dist-is-debian; then
        install-git-on-debian
    else
        echo "Unable to install git for your OS $(os-family)"
}

safe-git-clone() {
    local _repo="${1:?}"
    local _dest_dir="${2:?}"
    local _branch="${3:-master}"

    if directory-exists $_dest_dir; then
        safe-copy $_dest_dir random-tmpdir
        ensure-directory-absent $_dest_dir
    fi

    git clone $_repo $_dest_dir -b $_branch
}

## OS Helpers
is-root() {
    if [[ $(id -u) -eq 0 ]]; then true; else false; fi
}

dist-is-redhat() {
    if os-is-linux && file-exists "/etc/redhat-release"; then
        true
    else
        false
    fi
}

dist-is-debian() {
    if os-is-linux && file-exists "/etc/debian_version"; then
        true
    else
        false
    fi
}

os-is-linux() {
    if string-equals os-family "Linux"; then true; else false; fi
}

os-family() {
    echo $(uname -s)
}


set-puppet-role-to-st2() {
    set-facter-value "role" "st2"
}

facts-d-directory() {
    echo "/etc/facter/facts.d"
}

set-facter-value() {
    local _fact="${1:?}"
    local _value="${1:?}"
    local _fact_file="$(facts-d-directory)/${_fact}.txt"

    ensure-directory-exists $(facts-d-directory)
    echo-to-new-file "${_fact}=${_value}" $_fact_file
}



## Helpers
# In many cases, these are exact copies of helpers that have been otherwise
# abstracted. This is intended, as this script cannot assert a full environment
# and must be independent.

## Bash Helpers
variable-set() {
    local _var="${1:-}"
    if [[ -n "$_var" ]]; then
        true
    else
        false
    fi
}

## File Helpers
random-tmpdir() {
    echo $(mktemp -d)
}
recursive-copy() {
    local _source_dir="${1:?}"
    local _dest_dir="${2:?}"
    cp -R $_source_dir $_dest_dir
}


safe-copy() {
    local _source_dir="${1:?}"
    local _dest_dir="${2:?}"
    local _backup_dir="${3:?}"

    if directory-exists $_dest_dir; then
        safe-copy $_dest_dir $_backup_dir $(random-tmpdir)
    fi

    ensure-directory-absent $_dest_dir
    recursive-copy $_source_dir $_dest_dir

    ensure-directory-absent $_backup_dir
}


ensure-directory-absent() {
    local _dir="${1:?}"

    if string-equals $_dir "/"; then
        error "Will not continue... deleting / is not allowed directly"
        exit 1
    fi

    if directory-exists $_dir; then recursive-rm $_dir; else true; fi
}

directory-exists() {
    if [[ -d "${1:?}" ]]; then true; else false; fi
}

ensure-file-exists() {
    local _file="${1:?}"

    if ! file-exists $_file; then
        debug "file $_file does not exist. creating..."
        touch $_file
    fi
}

ensure-file-absent() {
    local _file="${1:?}"
    if file-exists $_file; then recursive-rm $_file; else true; fi
}

file-exists() {
    if [[ -f "${1:?}" ]]; then true; else false; fi
}

echo-to-new-file() {
    local _message="${1:?}"
    local _file="${2:?}"

    ensure-file-absent $_file
    echo-to-file $_message $_file
}

echo-to-file() {
    local _message="${1:?}"
    local _file="${2:?}"

    echo "$_message" >> $_file
}

## Project Helpers
project-root() {
    local _project_root=/opt/puppet
    if variable-set $PROJECT_ROOT; then
        echo $PROJECT_ROOT
    else
        echo $_project_root
    fi
}

skip-st2-ok-check() {
    if ! variable-set $SKIP_OK_CHECK; then true; else false; fi
}

check-for-os-compatability() {
    eval "$(project-root)/script/check-os-compat"
}

run-bootstrap-os() {
    eval "$(project-root)/script/bootstrap-os"
}

run-puppet-apply() {
    eval "$(project-root)/script/puppet-apply"
}

check-st2-health() {
    if skip-st2-ok-check; then
        eval "$(project-root)/script/check-st2-ok"
    fi
}

workroom-hiera-file() {
    echo "$(project-root)/hieradata/workroom.yaml"
}

ensure-hubot-is-not-installed-if-requested-by-user() {
    if user-requested-to-disable-hubot; then
        echo-to-file "hubot: false" "$(workroom-hiera-file)"
    fi
}

user-requested-to-disable-hubot() {
    if variable-set $DISABLE_HUBOT; then true; else false; fi
}

setup-answer-file-if-supplied-by-user() {
    local _answer_file_path="$(project-root)/hieradata/answers.yaml"
    if variable-set $ANSWER_FILE; then
        ensure-file-absent $_answer_file_path
        safe-copy $ANSWER_FILE $_answer_file_path
    fi
}

# Main entry point for script
while :; do
    case $1 in
        -h|-\?|--help)
            show_help
            exit
            ;;
        -d|--debug)
            DEBUG=true
            shift
            continue
            ;;
        -e|--environment)
            if [ -n "$2" ]; then
                ENV=$2
                shift 2
                continue
            else
                printf 'ERROR "--environment" requires a non-empty argument.\n'
            fi
            ;;
        -s|--st2-puppet-branch)
            if [ -n "$2" ]; then
                PUPPET_ST2_BRANCH=$2
                shift 2
                continue
            else
                printf 'ERROR "--st2-puppet-branch" requires a non-empty argument.\n'
            fi
            ;;
        -b|--branch)
            if [ -n "$2" ]; then
                ENV=$2
                printf 'Please make note, "--branch" variable is deprecated.\n'
                printf 'Instead, change your entry to "--environment".\n'
                printf 'Will continue for now, but please update.\n'
                shift 2
                continue
            else
                printf 'ERROR: "--branch" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --branch=?*)
            ENV=${1#*=}
            ;;
        --branch=)
            printf 'ERROR: "--branch" requires a non-empty option argument.\n' >&2
            exit 1
            ;;
        -t|--trace)
            TRACE=true
            set -x
            shift
            continue
            ;;
        --)
            shift
            break
            ;;
        -?*)
            printf "WARN: unknown option ($1)... ignoring.\n"
            ;;
        *)
            break
    esac
    shift
done

init-bootstrap-st2
