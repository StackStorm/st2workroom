#!/usr/bin/env bash

random-tmpdir() {
    echo $(mktemp -d)
}

recursive-mkdir() {
    mkdir -p "${1:?}"
}

recursive-rm() {
    rm -rf "${1:?}"
}

ensure-directory-absent() {
    local _dir="${1:?}"

    if string-equals $_dir "/"; then
        error "Will not continue... deleting / is not allowed directly"
        exit 1
    fi

    if directory-exists $_dir; then recursive-rm $_dir; else true; fi
}

ensure-directory-exists() {
    local _dir="${1:?}"
    if ! directory_exists $_dir; then recursive-mkdir $_dir; else true; fi
}

directory-exists() {
    if [[ -d "${1:?}" ]]; then true; else false; fi
}

recursive-copy() {
    local _source_dir="${1:?}"
    local _dest_dir="${2:?}"
    cp -R $_source_dir $_dest_dir
}

safe-copy() {
    local _source_dir="${1:?}"
    local _dest_dir="${2:?}"
    local _backup_dir="${3:?}"

    if directory-exists $_dest_dir; then
        safe-copy $_dest_dir $_backup_dir $(random-tmpdir)
    fi

    ensure-directory-absent $_dest_dir
    recursive-copy $_source_dir $_dest_dir

    ensure-directory-absent $_backup_dir
}

ensure-file-exists() {
    local _file="${1:?}"

    if ! file-exists $_file; then
        debug "file $_file does not exist. creating..."
        touch $_file
    fi
}

ensure-file-absent() {
    local _file="${1:?}"
    if file-exists $_file; then recursive-rm $_file; else true; fi
}

file-exists() {
    if [[ -f "${1:?}" ]]; then true; else false; fi
}

executable-exists() {
    if hash "${1:?}" 2>/dev/null; then true; else false; fi
}
