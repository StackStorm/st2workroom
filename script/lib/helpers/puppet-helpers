#!/usr/bin/env bash
set -e
set -u
set -o pipefail

# install shared puppet libraries in a given directory
#
# @ install-puppet-libraries
install-puppet-libraries() {
    local _work_dir=
    local _log_dest=
    local _debug_args=
    local _args=
    local _cmd=
    _work_dir="${1:?}"

    pushd-quiet $_work_dir

    if debug-enabled;
    then
        _debug_args="--verbose";
        _log_dest="$(send-output-to-file-and-stdout $(log-file))"
    else
        _log_dest="$(send-all-output-to $(log-file))"
    fi

    _args="${_debug_args} ${_log_dest}"
    _cmd="librarian-puppet install --shared ${_args}"
    execute-string $_cmd

    pushd-stepout
}

# assembles and executes puppet, selecting the proper environment to apply
# based on user input, and automatically detecting the configuration files
# as appropriate
#
# @ run-puppet
run-puppet() {
    local _debug_args=
    local _graph_args=
    local _env_args=
    local _config_args=
    local _manifest_args=
    local _log_dest=
    local _cmd=
    local _args=

    _env_args="--environment $(sanitized-puppet-environment-to-apply)"
    _config_args="--config $(project-root)/puppet.conf"
    _manifest_args="$(environment-dir)/manifests"

    if debug-enabled;
    then
        ensure-directory-exists $(node-graph-dir)
        _graph_args="--graph --graphdir $(node-graph-dir)"
        _debug_args="--debug --verbose"
        _log_dest="$(send-output-to-file-and-stdout $(log-file))"
    else
        _log_dest="$(send-all-output-to $(log-file))"
    fi

    _args="$_env_args $_config_args $_manifest_args $_debug_args $_graph_args"
    _cmd="puppet apply ${_args}"
    execute-string $_cmd
}

# determines if a given fact has a value
#
# returns boolean
#
# @ facter-has-value <fact>
facter-has-value() {
    variable-set facter-value "${1:?}"
}

# returns the value of a facter fact
#
# returns string
#
# @ facter-value <fact>
facter-value() {
    echo "$(project-root)/bin/facter ${1:?}"
}

# returns the default facts.d directory
#
# returns string
#
# @ facts-d-directory
facts-d-directory() {
    echo "/etc/facter/facts.d"
}

# Create a facter.d value based on the user input
#
# @ set-facter-value <fact> <value>
set-facter-value() {
    local _fact=
    local _value=
    local _fact_file=
    local _fact="${1:?}"
    local _value="${2:?}"
    local _fact_file="$(facts-d-directory)/${_fact}.txt"

    ensure-directory-exists $(facts-d-directory)
    echo-to-new-file "${_fact}=${_value}" $_fact_file
}
