#!/usr/bin/env bash

setup-environment-from-git-branch() {
    trace "'setup-environment-from-git-branch' entering"
    rake environments:update[sanitized-puppet-environment-to-apply]
}

sync-dir-to-puppet-environment() {
    trace "'sync-dir-to-puppet-environment' entering"

    local _args_array=($@)
    local _arg_len=${#_args_array[@]}

    local _source_dir="${1:?}"
    local _environment="${2:?}"
    local _excludes="${@:3:$_args_len}"
    local _environment_dir="$(environment-dir ${_environment})"

    local _excludes_args=
    if has-value $_excludes; then
        _excludes_args="$(add-prefix-to-each '--excludes' $_excludes)"
    fi

    rsync-dir $_source_dir $_environment_dir $_excludes_args
}

setup-current-working-directory-environment() {
    trace "'setup-current-working-directory-environment' entering"

    local _excludes="environments vendor artifacts graphs packer script .git"
    sync-dir-to-puppet-environment project-root current_working_directory $_excludes_args
}

currently-in-an-environment() {
    trace "'currently-in-an-environment' entering"

    if string-does-not-equal current-environment production-environment; then
        true
    else
        false
    fi
}

current-environment() {
    trace "'current-environment' entering"

    if facter-has-value puppet_environment; then
        facter-value puppet_environment
    else
        production-environment
    fi
}

requested-environment() {
    trace "'requested-environment' entering"

    if variable-set $ENV; then
        echo $ENV
    else
        current-environment
    fi
}

sanitized-puppet-environment-to-apply() {
    trace "'sanitized-puppet-environment-to-apply' entering"

    environment-to-apply | sed 's/[-\/.]/_/g'
}

is-valid-environment() {
    trace "'is-valid-environment' entering"

    if git-ref-is-branch project-root environment ||
            git-ref-is-tag project-root environment; then
        true
    else
        warn-invalid-environment
        false
    fi
}

production-mode() {
    trace "'production-mode' entering"

    if string-equals requested-environment production-environment; then
        true
    else
        false
    fi
}

local-development-mode() {
    trace "'local-development-mode' entering"

    if string-equals requested-environment local-development-environment; then
        true
    else
        false
    fi
}

branch-development-mode() {
    trace "'branch-development-mode' entering"
    if ! production-mode && ! local-development-mode; then true; else false; fi
}

local-development-environment() {
    trace "'local-development-environment' entering"
    echo "current_working_directory"
}

production-environment() {
    trace "'production-environment' entering"
    echo "master"
}

environment-to-apply() {
    trace "'environment-to-apply' entering"

    if local-development-mode; then
        local-development-environment
    elif production-mode; then
        production-environment
    elif branch-development-mode && is-valid-environment; then
        environment
    else
        production-environment
    fi
}

environment-root() {
    trace "'environment-root' entering"
    echo "$(project-root)/environments"
}

environment-dir() {
    trace "'environment-dir' entering"
    echo "$(environment-root)/$(environment-to-apply)"
}

environment-graph-dir() {
    trace "'environment-dir' entering"
    echo "$(environment-dir)/graphs"
}

node-graph-dir() {
    trace "'node-graph-dir' entering"
    echo "$(environment-graph-dir)/$(node-name)"
}
